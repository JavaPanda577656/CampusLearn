package com.thesensationals.campuslearn.controller;

// SPRING FRAMEWORK IMPORTS
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.server.ResponseStatusException;

// JAVA UTILITY IMPORTS
import java.time.LocalDateTime;

// YOUR PROJECT IMPORTS
import com.thesensationals.campuslearn.dto.ForumPostDto; // Assuming this is correct
import com.thesensationals.campuslearn.model.ForumPost; 
import com.thesensationals.campuslearn.model.ForumThread;

import com.thesensationals.campuslearn.repository.ForumPostRepository;
import com.thesensationals.campuslearn.repository.ForumThreadRepository;
import com.thesensationals.campuslearn.service.ForumService;
import com.thesensationals.campuslearn.dto.ForumCategoryDTO;
import java.util.List;

@RestController
@RequestMapping("/api/forums")
@CrossOrigin(origins = "http://localhost:5173") // allow the front-end dev server
public class ForumController {
    
    private final ForumPostRepository forumPostRepository;
    private final ForumThreadRepository forumThreadRepository;
    private final ForumService forumService;

    public ForumController(ForumPostRepository forumPostRepository, ForumThreadRepository forumThreadRepository, ForumService forumService) {
        this.forumPostRepository = forumPostRepository;
        this.forumThreadRepository = forumThreadRepository;
        this.forumService = forumService;
    }

    @PostMapping("/post")
    public ResponseEntity<ForumPost> createPost(@RequestBody ForumPostDto postDto) {
        
        // 1. Validate DTO content
        if (postDto.getContent() == null || postDto.getContent().trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Post content cannot be empty.");
        }
        
        // 2. Find the ForumThread entity
        ForumThread thread = forumThreadRepository.findById(postDto.getThreadId())
            .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Thread not found with ID: " + postDto.getThreadId()));
            
        // 3. Create a new ForumPost entity
        ForumPost newPost = new ForumPost();
        
        // These setters are generated by @Data in ForumPost.java
        newPost.setThread(thread); 
        newPost.setAuthorName(postDto.getAuthorName() != null ? postDto.getAuthorName() : "Anonymous"); 
        newPost.setContent(postDto.getContent());
        newPost.setPostedAt(LocalDateTime.now());
        
        // 4. Save the post
        ForumPost savedPost = forumPostRepository.save(newPost);
        
        // 5. Update thread's last updated time (Setter generated by @Data in ForumThread.java)
        thread.setLastUpdated(LocalDateTime.now());
        forumThreadRepository.save(thread);

        // 6. Return the saved post with 201 Created status
        return new ResponseEntity<>(savedPost, HttpStatus.CREATED);
    }

    // New endpoint to expose forum categories to the front-end
    @GetMapping("/categories")
    public ResponseEntity<List<ForumCategoryDTO>> getAllCategories() {
        List<ForumCategoryDTO> categories = forumService.getAllCategories();
        return ResponseEntity.ok(categories);
    }
}